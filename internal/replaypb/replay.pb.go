// Code generated by protoc-gen-go. DO NOT EDIT.
// source: replay.proto

package replaypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	reflexpb "github.com/luno/reflex/reflexpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type SleepDone struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SleepDone) Reset()         { *m = SleepDone{} }
func (m *SleepDone) String() string { return proto.CompactTextString(m) }
func (*SleepDone) ProtoMessage()    {}
func (*SleepDone) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{1}
}

func (m *SleepDone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SleepDone.Unmarshal(m, b)
}
func (m *SleepDone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SleepDone.Marshal(b, m, deterministic)
}
func (m *SleepDone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SleepDone.Merge(m, src)
}
func (m *SleepDone) XXX_Size() int {
	return xxx_messageInfo_SleepDone.Size(m)
}
func (m *SleepDone) XXX_DiscardUnknown() {
	xxx_messageInfo_SleepDone.DiscardUnknown(m)
}

var xxx_messageInfo_SleepDone proto.InternalMessageInfo

type SleepRequest struct {
	Duration             *duration.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SleepRequest) Reset()         { *m = SleepRequest{} }
func (m *SleepRequest) String() string { return proto.CompactTextString(m) }
func (*SleepRequest) ProtoMessage()    {}
func (*SleepRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{2}
}

func (m *SleepRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SleepRequest.Unmarshal(m, b)
}
func (m *SleepRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SleepRequest.Marshal(b, m, deterministic)
}
func (m *SleepRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SleepRequest.Merge(m, src)
}
func (m *SleepRequest) XXX_Size() int {
	return xxx_messageInfo_SleepRequest.Size(m)
}
func (m *SleepRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SleepRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SleepRequest proto.InternalMessageInfo

func (m *SleepRequest) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type Events struct {
	Events               []*reflexpb.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Events) Reset()         { *m = Events{} }
func (m *Events) String() string { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()    {}
func (*Events) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{3}
}

func (m *Events) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Events.Unmarshal(m, b)
}
func (m *Events) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Events.Marshal(b, m, deterministic)
}
func (m *Events) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Events.Merge(m, src)
}
func (m *Events) XXX_Size() int {
	return xxx_messageInfo_Events.Size(m)
}
func (m *Events) XXX_DiscardUnknown() {
	xxx_messageInfo_Events.DiscardUnknown(m)
}

var xxx_messageInfo_Events proto.InternalMessageInfo

func (m *Events) GetEvents() []*reflexpb.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type RunRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Workflow             string   `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Run                  string   `protobuf:"bytes,3,opt,name=run,proto3" json:"run,omitempty"`
	Message              *any.Any `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{4}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RunRequest) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *RunRequest) GetRun() string {
	if m != nil {
		return m.Run
	}
	return ""
}

func (m *RunRequest) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

type SignalRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Workflow             string   `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Run                  string   `protobuf:"bytes,3,opt,name=run,proto3" json:"run,omitempty"`
	SignalType           int32    `protobuf:"varint,4,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
	Message              *any.Any `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ExternalId           string   `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignalRequest) Reset()         { *m = SignalRequest{} }
func (m *SignalRequest) String() string { return proto.CompactTextString(m) }
func (*SignalRequest) ProtoMessage()    {}
func (*SignalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{5}
}

func (m *SignalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalRequest.Unmarshal(m, b)
}
func (m *SignalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalRequest.Marshal(b, m, deterministic)
}
func (m *SignalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalRequest.Merge(m, src)
}
func (m *SignalRequest) XXX_Size() int {
	return xxx_messageInfo_SignalRequest.Size(m)
}
func (m *SignalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignalRequest proto.InternalMessageInfo

func (m *SignalRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalRequest) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *SignalRequest) GetRun() string {
	if m != nil {
		return m.Run
	}
	return ""
}

func (m *SignalRequest) GetSignalType() int32 {
	if m != nil {
		return m.SignalType
	}
	return 0
}

func (m *SignalRequest) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignalRequest) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

type ActivityMessage struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message              *any.Any `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityMessage) Reset()         { *m = ActivityMessage{} }
func (m *ActivityMessage) String() string { return proto.CompactTextString(m) }
func (*ActivityMessage) ProtoMessage()    {}
func (*ActivityMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{6}
}

func (m *ActivityMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivityMessage.Unmarshal(m, b)
}
func (m *ActivityMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivityMessage.Marshal(b, m, deterministic)
}
func (m *ActivityMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityMessage.Merge(m, src)
}
func (m *ActivityMessage) XXX_Size() int {
	return xxx_messageInfo_ActivityMessage.Size(m)
}
func (m *ActivityMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityMessage proto.InternalMessageInfo

func (m *ActivityMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ActivityMessage) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

type CompleteRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Workflow             string   `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Run                  string   `protobuf:"bytes,3,opt,name=run,proto3" json:"run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompleteRequest) Reset()         { *m = CompleteRequest{} }
func (m *CompleteRequest) String() string { return proto.CompactTextString(m) }
func (*CompleteRequest) ProtoMessage()    {}
func (*CompleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{7}
}

func (m *CompleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompleteRequest.Unmarshal(m, b)
}
func (m *CompleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompleteRequest.Marshal(b, m, deterministic)
}
func (m *CompleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteRequest.Merge(m, src)
}
func (m *CompleteRequest) XXX_Size() int {
	return xxx_messageInfo_CompleteRequest.Size(m)
}
func (m *CompleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteRequest proto.InternalMessageInfo

func (m *CompleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CompleteRequest) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *CompleteRequest) GetRun() string {
	if m != nil {
		return m.Run
	}
	return ""
}

type ListBootstrapRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Workflow             string   `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Run                  string   `protobuf:"bytes,3,opt,name=run,proto3" json:"run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBootstrapRequest) Reset()         { *m = ListBootstrapRequest{} }
func (m *ListBootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*ListBootstrapRequest) ProtoMessage()    {}
func (*ListBootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{8}
}

func (m *ListBootstrapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBootstrapRequest.Unmarshal(m, b)
}
func (m *ListBootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBootstrapRequest.Marshal(b, m, deterministic)
}
func (m *ListBootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBootstrapRequest.Merge(m, src)
}
func (m *ListBootstrapRequest) XXX_Size() int {
	return xxx_messageInfo_ListBootstrapRequest.Size(m)
}
func (m *ListBootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBootstrapRequest proto.InternalMessageInfo

func (m *ListBootstrapRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListBootstrapRequest) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *ListBootstrapRequest) GetRun() string {
	if m != nil {
		return m.Run
	}
	return ""
}

type StreamRequest struct {
	Namespace            string                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Req                  *reflexpb.StreamRequest `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{9}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StreamRequest) GetReq() *reflexpb.StreamRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "replaypb.Empty")
	proto.RegisterType((*SleepDone)(nil), "replaypb.SleepDone")
	proto.RegisterType((*SleepRequest)(nil), "replaypb.SleepRequest")
	proto.RegisterType((*Events)(nil), "replaypb.Events")
	proto.RegisterType((*RunRequest)(nil), "replaypb.RunRequest")
	proto.RegisterType((*SignalRequest)(nil), "replaypb.SignalRequest")
	proto.RegisterType((*ActivityMessage)(nil), "replaypb.ActivityMessage")
	proto.RegisterType((*CompleteRequest)(nil), "replaypb.CompleteRequest")
	proto.RegisterType((*ListBootstrapRequest)(nil), "replaypb.ListBootstrapRequest")
	proto.RegisterType((*StreamRequest)(nil), "replaypb.StreamRequest")
}

func init() { proto.RegisterFile("replay.proto", fileDescriptor_eed9461330ccfc03) }

var fileDescriptor_eed9461330ccfc03 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x8e, 0xeb, 0x3f, 0x6e, 0x72, 0xdc, 0x2a, 0xd1, 0xfc, 0x91, 0xea, 0x58, 0xa8, 0x54, 0xde,
	0x50, 0x24, 0xe4, 0x40, 0x10, 0x65, 0xc1, 0x02, 0x15, 0x9a, 0x45, 0x25, 0xd8, 0x38, 0x48, 0xb0,
	0x41, 0xc8, 0x4e, 0x4e, 0x82, 0x55, 0x7b, 0x66, 0x6a, 0xcf, 0xb4, 0xf5, 0x1b, 0xf0, 0x4e, 0x3c,
	0x03, 0xef, 0x84, 0x32, 0x1e, 0xc7, 0x49, 0x08, 0x52, 0x84, 0x94, 0x95, 0xcf, 0xf5, 0x3b, 0xb7,
	0xcf, 0x03, 0x47, 0x19, 0xf2, 0x24, 0x2c, 0x7c, 0x9e, 0x31, 0xc1, 0x48, 0xab, 0xd4, 0x78, 0xe4,
	0x3e, 0x9b, 0xc7, 0xe2, 0xbb, 0x8c, 0xfc, 0x09, 0x4b, 0x07, 0x89, 0xa4, 0x6c, 0x90, 0xe1, 0x2c,
	0xc1, 0x07, 0xfd, 0xe1, 0x91, 0x16, 0xca, 0x3c, 0xb7, 0x3f, 0x67, 0x6c, 0x9e, 0xe0, 0x40, 0x69,
	0x91, 0x9c, 0x0d, 0x42, 0xaa, 0x21, 0xdd, 0xd3, 0x4d, 0xd7, 0x54, 0x66, 0xa1, 0x88, 0x19, 0x2d,
	0xfd, 0xde, 0x21, 0x34, 0x47, 0x29, 0x17, 0x85, 0x67, 0x43, 0x7b, 0x9c, 0x20, 0xf2, 0x2b, 0x46,
	0xd1, 0x1b, 0xc1, 0x91, 0x52, 0x02, 0xbc, 0x95, 0x98, 0x0b, 0xf2, 0x0a, 0x5a, 0x55, 0x9e, 0x63,
	0x9c, 0x19, 0xe7, 0xf6, 0xb0, 0xef, 0x97, 0xc0, 0x7e, 0x05, 0xec, 0x5f, 0xe9, 0x80, 0x60, 0x19,
	0xea, 0xbd, 0x00, 0x6b, 0x74, 0x87, 0x54, 0xe4, 0xe4, 0x09, 0x58, 0xa8, 0x24, 0xc7, 0x38, 0x33,
	0xcf, 0xed, 0x61, 0xc7, 0xaf, 0x26, 0xf1, 0x55, 0x44, 0xa0, 0xdd, 0xde, 0x0f, 0x03, 0x20, 0x90,
	0xb4, 0x2a, 0xfc, 0x08, 0xda, 0x34, 0x4c, 0x31, 0xe7, 0xe1, 0x04, 0x55, 0xe5, 0x76, 0x50, 0x1b,
	0x88, 0x0b, 0xad, 0x7b, 0x96, 0xdd, 0xcc, 0x12, 0x76, 0xef, 0x1c, 0x28, 0xe7, 0x52, 0x27, 0x5d,
	0x30, 0x33, 0x49, 0x1d, 0x53, 0x99, 0x17, 0x22, 0xf1, 0xe1, 0x30, 0xc5, 0x3c, 0x0f, 0xe7, 0xe8,
	0xfc, 0xa7, 0x66, 0xe8, 0xfd, 0x31, 0xc3, 0x25, 0x2d, 0x82, 0x2a, 0xc8, 0xfb, 0x65, 0xc0, 0xf1,
	0x38, 0x9e, 0xd3, 0x30, 0xd9, 0x47, 0x37, 0x8f, 0xc1, 0xce, 0x15, 0xf8, 0x37, 0x51, 0xf0, 0xb2,
	0xa3, 0x66, 0x00, 0xa5, 0xe9, 0x53, 0xc1, 0x71, 0xb5, 0xdd, 0xe6, 0x0e, 0xed, 0x2e, 0x00, 0xf1,
	0x41, 0x60, 0xb6, 0x80, 0x8c, 0xa7, 0x8e, 0xa5, 0x4a, 0x41, 0x65, 0xba, 0x9e, 0x7a, 0x63, 0xe8,
	0x5c, 0x4e, 0x44, 0x7c, 0x17, 0x8b, 0xe2, 0xa3, 0xce, 0xe9, 0x82, 0x79, 0x83, 0x85, 0x1e, 0x65,
	0x21, 0xae, 0x56, 0x3d, 0xd8, 0x65, 0x49, 0x5f, 0xa1, 0xf3, 0x9e, 0xa5, 0x3c, 0x41, 0x81, 0x7b,
	0xd8, 0x92, 0x17, 0x41, 0xef, 0x43, 0x9c, 0x8b, 0x77, 0x8c, 0x89, 0x5c, 0x64, 0x21, 0xdf, 0x47,
	0x8d, 0x2f, 0x70, 0x3c, 0x16, 0x19, 0x86, 0xe9, 0x6e, 0xe0, 0x4f, 0xc1, 0xcc, 0xf0, 0x56, 0x6f,
	0xe7, 0xa4, 0xe6, 0xf1, 0x1a, 0x46, 0xb0, 0x88, 0x19, 0xfe, 0x34, 0xc1, 0x0a, 0xd4, 0x2f, 0x4d,
	0x2e, 0xc0, 0x0e, 0x24, 0xfd, 0x5c, 0x75, 0xd1, 0xf3, 0xab, 0x5f, 0xdd, 0xaf, 0xd9, 0xee, 0x76,
	0x6a, 0x6b, 0xf9, 0x53, 0x36, 0xc8, 0x6b, 0x68, 0x6b, 0x0e, 0x4a, 0x4a, 0x4e, 0x6a, 0xff, 0x1a,
	0x31, 0xb7, 0x25, 0xbe, 0x85, 0x8e, 0xf6, 0x56, 0x47, 0x27, 0xfd, 0x3a, 0x6a, 0x83, 0x08, 0x7f,
	0x05, 0xc8, 0x39, 0xa3, 0xd3, 0x7f, 0x04, 0x78, 0x03, 0xf6, 0x92, 0x1a, 0x92, 0xae, 0x26, 0x6f,
	0x30, 0x66, 0x5b, 0xf2, 0x35, 0xfc, 0xbf, 0x76, 0x78, 0xfd, 0x8e, 0x9c, 0xd6, 0x91, 0xdb, 0x78,
	0xe1, 0x76, 0x57, 0x90, 0xca, 0x07, 0xa5, 0x41, 0x2e, 0xc0, 0x2a, 0x6f, 0xb3, 0xb6, 0xbf, 0xd5,
	0x6b, 0xb9, 0x9b, 0xcf, 0x91, 0xd7, 0x78, 0x6e, 0x44, 0x96, 0x62, 0xfc, 0xcb, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x2d, 0xa0, 0x98, 0x90, 0xa4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplayClient is the client API for Replay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplayClient interface {
	RunWorkflow(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Empty, error)
	SignalRun(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*Empty, error)
	RequestActivity(ctx context.Context, in *ActivityMessage, opts ...grpc.CallOption) (*Empty, error)
	RespondActivity(ctx context.Context, in *ActivityMessage, opts ...grpc.CallOption) (*Empty, error)
	CompleteRun(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*Empty, error)
	ListBootstrapEvents(ctx context.Context, in *ListBootstrapRequest, opts ...grpc.CallOption) (*Events, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Replay_StreamClient, error)
}

type replayClient struct {
	cc *grpc.ClientConn
}

func NewReplayClient(cc *grpc.ClientConn) ReplayClient {
	return &replayClient{cc}
}

func (c *replayClient) RunWorkflow(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/RunWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) SignalRun(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/SignalRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) RequestActivity(ctx context.Context, in *ActivityMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/RequestActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) RespondActivity(ctx context.Context, in *ActivityMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/RespondActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) CompleteRun(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/CompleteRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) ListBootstrapEvents(ctx context.Context, in *ListBootstrapRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/ListBootstrapEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Replay_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Replay_serviceDesc.Streams[0], "/replaypb.Replay/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &replayStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Replay_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type replayStreamClient struct {
	grpc.ClientStream
}

func (x *replayStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplayServer is the server API for Replay service.
type ReplayServer interface {
	RunWorkflow(context.Context, *RunRequest) (*Empty, error)
	SignalRun(context.Context, *SignalRequest) (*Empty, error)
	RequestActivity(context.Context, *ActivityMessage) (*Empty, error)
	RespondActivity(context.Context, *ActivityMessage) (*Empty, error)
	CompleteRun(context.Context, *CompleteRequest) (*Empty, error)
	ListBootstrapEvents(context.Context, *ListBootstrapRequest) (*Events, error)
	Stream(*StreamRequest, Replay_StreamServer) error
}

// UnimplementedReplayServer can be embedded to have forward compatible implementations.
type UnimplementedReplayServer struct {
}

func (*UnimplementedReplayServer) RunWorkflow(ctx context.Context, req *RunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (*UnimplementedReplayServer) SignalRun(ctx context.Context, req *SignalRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalRun not implemented")
}
func (*UnimplementedReplayServer) RequestActivity(ctx context.Context, req *ActivityMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestActivity not implemented")
}
func (*UnimplementedReplayServer) RespondActivity(ctx context.Context, req *ActivityMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivity not implemented")
}
func (*UnimplementedReplayServer) CompleteRun(ctx context.Context, req *CompleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRun not implemented")
}
func (*UnimplementedReplayServer) ListBootstrapEvents(ctx context.Context, req *ListBootstrapRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBootstrapEvents not implemented")
}
func (*UnimplementedReplayServer) Stream(req *StreamRequest, srv Replay_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterReplayServer(s *grpc.Server, srv ReplayServer) {
	s.RegisterService(&_Replay_serviceDesc, srv)
}

func _Replay_RunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).RunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/RunWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).RunWorkflow(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_SignalRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).SignalRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/SignalRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).SignalRun(ctx, req.(*SignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_RequestActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).RequestActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/RequestActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).RequestActivity(ctx, req.(*ActivityMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_RespondActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).RespondActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/RespondActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).RespondActivity(ctx, req.(*ActivityMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_CompleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).CompleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/CompleteRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).CompleteRun(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_ListBootstrapEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).ListBootstrapEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/ListBootstrapEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).ListBootstrapEvents(ctx, req.(*ListBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplayServer).Stream(m, &replayStreamServer{stream})
}

type Replay_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type replayStreamServer struct {
	grpc.ServerStream
}

func (x *replayStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Replay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "replaypb.Replay",
	HandlerType: (*ReplayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunWorkflow",
			Handler:    _Replay_RunWorkflow_Handler,
		},
		{
			MethodName: "SignalRun",
			Handler:    _Replay_SignalRun_Handler,
		},
		{
			MethodName: "RequestActivity",
			Handler:    _Replay_RequestActivity_Handler,
		},
		{
			MethodName: "RespondActivity",
			Handler:    _Replay_RespondActivity_Handler,
		},
		{
			MethodName: "CompleteRun",
			Handler:    _Replay_CompleteRun_Handler,
		},
		{
			MethodName: "ListBootstrapEvents",
			Handler:    _Replay_ListBootstrapEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Replay_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "replay.proto",
}
