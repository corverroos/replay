// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package replaypb

import (
	context "context"
	reflexpb "github.com/luno/reflex/reflexpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplayClient is the client API for Replay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplayClient interface {
	RunWorkflow(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*OK, error)
	SignalRun(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*OK, error)
	InsertEvent(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*Empty, error)
	CompleteRun(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*Empty, error)
	RestartRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Empty, error)
	ListBootstrapEvents(ctx context.Context, in *ListBootstrapRequest, opts ...grpc.CallOption) (*Events, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Replay_StreamClient, error)
}

type replayClient struct {
	cc grpc.ClientConnInterface
}

func NewReplayClient(cc grpc.ClientConnInterface) ReplayClient {
	return &replayClient{cc}
}

func (c *replayClient) RunWorkflow(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/RunWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) SignalRun(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/SignalRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) InsertEvent(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/InsertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) CompleteRun(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/CompleteRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) RestartRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/RestartRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) ListBootstrapEvents(ctx context.Context, in *ListBootstrapRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/replaypb.Replay/ListBootstrapEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Replay_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Replay_ServiceDesc.Streams[0], "/replaypb.Replay/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &replayStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Replay_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type replayStreamClient struct {
	grpc.ClientStream
}

func (x *replayStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplayServer is the server API for Replay service.
// All implementations must embed UnimplementedReplayServer
// for forward compatibility
type ReplayServer interface {
	RunWorkflow(context.Context, *RunRequest) (*OK, error)
	SignalRun(context.Context, *SignalRequest) (*OK, error)
	InsertEvent(context.Context, *InsertRequest) (*Empty, error)
	CompleteRun(context.Context, *CompleteRequest) (*Empty, error)
	RestartRun(context.Context, *RunRequest) (*Empty, error)
	ListBootstrapEvents(context.Context, *ListBootstrapRequest) (*Events, error)
	Stream(*StreamRequest, Replay_StreamServer) error
	mustEmbedUnimplementedReplayServer()
}

// UnimplementedReplayServer must be embedded to have forward compatible implementations.
type UnimplementedReplayServer struct {
}

func (UnimplementedReplayServer) RunWorkflow(context.Context, *RunRequest) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedReplayServer) SignalRun(context.Context, *SignalRequest) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalRun not implemented")
}
func (UnimplementedReplayServer) InsertEvent(context.Context, *InsertRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEvent not implemented")
}
func (UnimplementedReplayServer) CompleteRun(context.Context, *CompleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRun not implemented")
}
func (UnimplementedReplayServer) RestartRun(context.Context, *RunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRun not implemented")
}
func (UnimplementedReplayServer) ListBootstrapEvents(context.Context, *ListBootstrapRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBootstrapEvents not implemented")
}
func (UnimplementedReplayServer) Stream(*StreamRequest, Replay_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedReplayServer) mustEmbedUnimplementedReplayServer() {}

// UnsafeReplayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplayServer will
// result in compilation errors.
type UnsafeReplayServer interface {
	mustEmbedUnimplementedReplayServer()
}

func RegisterReplayServer(s grpc.ServiceRegistrar, srv ReplayServer) {
	s.RegisterService(&Replay_ServiceDesc, srv)
}

func _Replay_RunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).RunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/RunWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).RunWorkflow(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_SignalRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).SignalRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/SignalRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).SignalRun(ctx, req.(*SignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_InsertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).InsertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/InsertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).InsertEvent(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_CompleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).CompleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/CompleteRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).CompleteRun(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_RestartRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).RestartRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/RestartRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).RestartRun(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_ListBootstrapEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayServer).ListBootstrapEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replaypb.Replay/ListBootstrapEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayServer).ListBootstrapEvents(ctx, req.(*ListBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replay_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplayServer).Stream(m, &replayStreamServer{stream})
}

type Replay_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type replayStreamServer struct {
	grpc.ServerStream
}

func (x *replayStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

// Replay_ServiceDesc is the grpc.ServiceDesc for Replay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replaypb.Replay",
	HandlerType: (*ReplayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunWorkflow",
			Handler:    _Replay_RunWorkflow_Handler,
		},
		{
			MethodName: "SignalRun",
			Handler:    _Replay_SignalRun_Handler,
		},
		{
			MethodName: "InsertEvent",
			Handler:    _Replay_InsertEvent_Handler,
		},
		{
			MethodName: "CompleteRun",
			Handler:    _Replay_CompleteRun_Handler,
		},
		{
			MethodName: "RestartRun",
			Handler:    _Replay_RestartRun_Handler,
		},
		{
			MethodName: "ListBootstrapEvents",
			Handler:    _Replay_ListBootstrapEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Replay_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "replay.proto",
}
