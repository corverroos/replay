package expose

// Code generated by typedreplay. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/luno/reflex"
	"google.golang.org/protobuf/proto"

	"github.com/corverroos/replay"
	"github.com/corverroos/replay/typedreplay/internal/testdata"
	// TODO(corver): Support importing other packages.
)

const (
	_ns   = "example"
	_wFoo = "foo"
	_aA   = "a"
)

// RunFoo provides a type API for running the foo workflow.
// It returns true on success or false on duplicate calls or an error.
func RunFoo(ctx context.Context, cl replay.Client, run string, message *testdata.Empty) (bool, error) {
	return cl.RunWorkflow(ctx, _ns, _wFoo, run, message)
}

// RegisterFoo registers and starts the foo workflow consumer.
func RegisterFoo(getCtx func() context.Context, cl replay.Client, cstore reflex.CursorStore,
	foo func(fooFlow, *testdata.Empty), opts ...replay.Option) {

	fooFunc := func(ctx *replay.RunContext, message *testdata.Empty) {
		foo(fooFlowImpl{ctx}, message)
	}

	copied := append([]replay.Option{replay.WithName(_wFoo)}, opts...)

	replay.RegisterWorkflow(getCtx, cl, cstore, _ns, fooFunc, copied...)
}

// RegisterA registers and starts the ActivityA activity consumer.
func RegisterA(getCtx func() context.Context, cl replay.Client, cstore reflex.CursorStore, b Backends, opts ...replay.Option) {

	copied := append([]replay.Option{replay.WithName(_aA)}, opts...)

	replay.RegisterActivity(getCtx, cl, cstore, b, _ns, ActivityA, copied...)
}

// fooFlow defines a typed API for the foo workflow.
type fooFlow interface {

	// Sleep blocks for at least d duration.
	// Note that replay sleeps aren't very accurate and
	// a few seconds is the practical minimum.
	Sleep(d time.Duration)

	// CreateEvent returns the reflex event that started the run iteration (type is internal.CreateRun).
	// The event timestamp could be used to reason about run age.
	CreateEvent() *reflex.Event

	// LastEvent returns the latest reflex event (type is either internal.CreateRun or internal.ActivityResponse).
	// The event timestamp could be used to reason about run liveliness.
	LastEvent() *reflex.Event

	// Now returns the last event timestamp as the deterministic "current" time.
	// It is assumed the first time this is used in logic it will be very close to correct while
	// producing deterministic logic during bootstrapping.
	Now() time.Time

	// Run returns the run name/identifier.
	Run() string

	// Restart completes the current run iteration and starts a new run iteration with the provided input message.
	// The run state is effectively reset. This is handy to mitigate bootstrap load for long running tasks.
	// It also allows updating the activity logic/ordering.
	Restart(message *testdata.Empty)

	// ActivityA results in the ActivityA activity being called asynchronously
	// with the provided parameter and returns the response once available.
	ActivityA(message *testdata.Empty) *testdata.String
}

type fooFlowImpl struct {
	ctx *replay.RunContext
}

func (f fooFlowImpl) Sleep(d time.Duration) {
	f.ctx.Sleep(d)
}

func (f fooFlowImpl) CreateEvent() *reflex.Event {
	return f.ctx.CreateEvent()
}

func (f fooFlowImpl) LastEvent() *reflex.Event {
	return f.ctx.LastEvent()
}

func (f fooFlowImpl) Now() time.Time {
	return f.ctx.LastEvent().Timestamp
}

func (f fooFlowImpl) Run() string {
	return f.ctx.Run()
}

func (f fooFlowImpl) Restart(message *testdata.Empty) {
	f.ctx.Restart(message)
}

func (f fooFlowImpl) ActivityA(message *testdata.Empty) *testdata.String {
	return f.ctx.ExecActivity(ActivityA, message, replay.WithName(_aA)).(*testdata.String)
}

// StreamFoo returns a stream of replay events for the foo workflow and an optional run.
func StreamFoo(cl replay.Client, run string) reflex.StreamFunc {
	return cl.Stream(_ns, _wFoo, run)
}

// HandleFooRun calls fn if the event is a foo RunCreated event.
// Use StreamFoo to provide the events.
func HandleFooRun(e *reflex.Event, fn func(run string, message *testdata.Empty) error) error {
	return replay.Handle(e,
		replay.HandleSkip(func(namespace, workflow, run string) bool {
			return namespace != _ns || workflow != _wFoo
		}),
		replay.HandleRunCreated(func(namespace, workflow, run string, message proto.Message) error {
			return fn(run, message.(*testdata.Empty))
		}),
	)
}
